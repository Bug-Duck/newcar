{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/colorparsley@0.1.8/node_modules/colorparsley/src/colorparsley.js"],
  "sourcesContent": ["///////////////////////////////////////////////////////////////////////////////\n/** @preserve\n/////    CoLoR PaRsLeY  a simple set of color parsing thingies!\n/////           Beta 0.1.8   Revision date: June 04, 2022\n/////\n/////    Functions to parse color values and return array\n/////    Copyright (c) 2019-2022 by Andrew Somers. All Rights Reserved.\n/////    LICENSE: AGPL 3\n/////    CONTACT: Please use the ISSUES or DISCUSSIONS tab at:\n/////    https://github.com/Myndex/colorparsley/\n/////\n///////////////////////////////////////////////////////////////////////////////\n/////\n/////    IMPORT:\n/////    import { colorParsley } from 'colorparsley';\n/////\n/////    let rgbaArray = colorParsley('#abcdef');\n/////\n/////    Output as array:  [r,g,b,a,isValid,colorspace]\n/////    Example: [123,123,123,1.0,true,'sRGB']\n// */\n///////////////////////////////////////////////////////////////////////////////\n\n// ==ClosureCompiler==\n// @compilation_level SIMPLE_OPTIMIZATIONS\n// @output_file_name colorparsley.min.js\n// @code_url https://raw.githubusercontent.com/Myndex/colorparsley/master/src/colorparsley.js\n// ==/ClosureCompiler==\n\n// \n////////////////////////////////////////////////////////////////////////////////\n\n\n\n////////////////////////////////////////////////////////////////////////////////\n/////  BEGIN COLOR PARSLEY 0.1.8  BLOCK  \\/////////////////////////////////////\n////                                      \\///////////////////////////////////\n///                                        \\/////////////////////////////////\n\n\n/////  ƒ  colorParsley()  ///////////////////////////////////////////////////\n\nexport function colorParsley (colorIn) {\n\n    if (typeof colorIn === 'string') {\n        return parseString(colorIn);\n    } else if (typeof colorIn === 'number') {\n        return [(colorIn & 0xFF0000) >> 16,\n                (colorIn & 0x00FF00) >> 8,\n                (colorIn & 0x0000FF), 1, true, 'unknown'];\n    } else if (typeof colorIn === 'object') {\n       if (Array.isArray(colorIn)) {\n          return colorIn;\n       } else if (!isNaN(colorIn.r) || !isNaN(colorIn.red)){\n              // validate object & return array\n         let objArray = [0,0,0,0,false,'unknown'];\n             // takes object with r g b or red green blue etc...\n         objArray[0] = (colorIn.r)?colorIn.r:(colorIn.red)?\n                        colorIn.red:false;\n         objArray[1] = (colorIn.g)?colorIn.g:(colorIn.green)?\n                        colorIn.green:false;\n         objArray[2] = (colorIn.b)?colorIn.b:(colorIn.blue)?\n                        colorIn.blue:false;\n         objArray[3] = (colorIn.a)?colorIn.a:(colorIn.alpha)?\n                        colorIn.alpha:1;\n         objArray[4] = (objArray[0]&&objArray[1]&&objArray[2]) ? true : false;\n         objArray[5] =\n            (colorIn.space)?colorIn.space:\n            (colorIn.colorSpace)?colorIn.colorSpace:\n            (colorIn.colorspace)?colorIn.colorspace:\n            'unknown';\n         \n         return objArray;\n       }\n    }; // End if statement\n        console.log('colorParsley error: invalid input')\n        return [0,0,0,0,false,'inputError'] // throw 'InvalidInput' // return error \n};\n\n\n/////  ƒ  parseString()  ///////////////////////////////////////////////////\n\n// private\nfunction parseString (colorString = '#abcdef') {\n\n                 // strip junk and make a clean string (replace unmatched)\n                // This retains all alphanumeric and , . # % ( ) /\n  colorString = colorString.replace(/[^\\w,.#%()\\/ -]/g,'');\n  colorString = colorString.toLowerCase();   // set lowercase\n  \n  let isValid = false; // validation flag, in array element [4]\n  let type = 'sRGB'; // Default colorspace flag in element [5]\n  let retArray = [0,0,0,0,isValid,type]; // init the return array\n\n\n      // test for named color before iterating array\n  if (colorString.match(/^(?:(?!rgb|l.h|hs|col|\\d|#).{0,4})(?=[g-z])/)) {\n\n\n    ///// CSS4 NAMED COLORS plus a bonus set of GREYS and GRAYS //////////\n    \n        // If name is matched, parse and return the color values\n    let namedColors = {\n    gray0:'000000',gray1:'111111',gray2:'222222',gray3:'333333',gray4:'444444',gray5:'555555',gray6:'666666',gray7:'777777',gray8:'888888',gray9:'999999',graya:'aaaaaa',grayb:'bbbbbb',grayc:'cccccc',grayd:'dddddd',graye:'eeeeee',grayf:'ffffff',midgray:'a0a0a0',\n    grey0:'000000',grey1:'111111',grey2:'222222',grey3:'333333',grey4:'444444',grey5:'555555',grey6:'666666',grey7:'777777',grey8:'888888',grey9:'999999',greya:'aaaaaa',greyb:'bbbbbb',greyc:'cccccc',greyd:'dddddd',greye:'eeeeee',greyf:'ffffff',midgrey:'a0a0a0',\n    aliceblue:'f0f8ff',antiquewhite:'faebd7',aqua:'00ffff',aquamarine:'7fffd4',azure:'f0ffff',\n    beige:'f5f5dc',bisque:'ffe4c4',black:'000000',blanchedalmond:'ffebcd',blue:'0000ff',blueviolet:'8a2be2',brown:'a52a2a',burlywood:'deb887',\n    cadetblue:'5f9ea0',chartreuse:'7fff00',chocolate:'d2691e',coral:'ff7f50',cornflowerblue:'6495ed',cornsilk:'fff8dc',crimson:'dc143c',cyan:'00ffff',\n    darkblue:'00008b',darkcyan:'008b8b',darkgoldenrod:'b8860b',darkgray:'a9a9a9',darkgreen:'006400',darkgrey:'a9a9a9',darkkhaki:'bdb76b',darkmagenta:'8b008b',darkolivegreen:'556b2f',darkorange:'ff8c00',darkorchid:'9932cc',darkred:'8b0000',darksalmon:'e9967a',darkseagreen:'8fbc8f',darkslateblue:'483d8b',darkslategray:'2f4f4f',darkslategrey:'2f4f4f',darkturquoise:'00ced1',darkviolet:'9400d3',deeppink:'ff1493',deepskyblue:'00bfff',dimgray:'696969',dimgrey:'696969',dodgerblue:'1e90ff',\n    firebrick:'b22222',floralwhite:'fffaf0',forestgreen:'228b22',fuchsia:'ff00ff',\n    gainsboro:'dcdcdc',ghostwhite:'f8f8ff',gold:'ffd700',goldenrod:'daa520',gray:'808080',green:'008000',greenyellow:'adff2f',grey:'808080',\n    honeydew:'f0fff0',hotpink:'ff69b4',\n    indianred:'cd5c5c',indigo:'4b0082',ivory:'fffff0',\n    khaki:'f0e68c',\n    lavender:'e6e6fa',lavenderblush:'fff0f5',lawngreen:'7cfc00',lemonchiffon:'fffacd',lightblue:'add8e6',lightcoral:'f08080',lightcyan:'e0ffff',lightgoldenrodyellow:'fafad2',lightgray:'d3d3d3',lightgreen:'90ee90',lightgrey:'d3d3d3',lightpink:'ffb6c1',lightsalmon:'ffa07a',lightseagreen:'20b2aa',lightskyblue:'87cefa',lightslategray:'778899',lightslategrey:'778899',lightsteelblue:'b0c4de',lightyellow:'ffffe0',lime:'00ff00',limegreen:'32cd32',linen:'faf0e6',\n    magenta:'ff00ff',maroon:'800000',mediumaquamarine:'66cdaa',mediumblue:'0000cd',mediumorchid:'ba55d3',mediumpurple:'9370db',mediumseagreen:'3cb371',mediumslateblue:'7b68ee',mediumspringgreen:'00fa9a',mediumturquoise:'48d1cc',mediumvioletred:'c71585',midnightblue:'191970',mintcream:'f5fffa',mistyrose:'ffe4e1',moccasin:'ffe4b5',\n    navajowhite:'ffdead',navy:'000080',\n    oldlace:'fdf5e6',olive:'808000',olivedrab:'6b8e23',orange:'ffa500',orangered:'ff4500',orchid:'da70d6',\n    palegoldenrod:'eee8aa',palegreen:'98fb98',paleturquoise:'afeeee',palevioletred:'db7093',papayawhip:'ffefd5',peachpuff:'ffdab9',peru:'cd853f',pink:'ffc0cb',plum:'dda0dd',powderblue:'b0e0e6',purple:'800080',\n    rebeccapurple:'663399',red:'ff0000',rosybrown:'bc8f8f',royalblue:'4169e1',\n    saddlebrown:'8b4513',salmon:'fa8072',sandybrown:'f4a460',seagreen:'2e8b57',seashell:'fff5ee',sienna:'a0522d',silver:'c0c0c0',skyblue:'87ceeb',slateblue:'6a5acd',slategray:'708090',slategrey:'708090',snow:'fffafa',springgreen:'00ff7f',steelblue:'4682b4',\n    tan:'d2b48c',teal:'008080',thistle:'d8bfd8',tomato:'ff6347',turquoise:'40e0d0',\n    violet:'ee82ee',\n    wheat:'f5deb3',white:'ffffff',whitesmoke:'f5f5f5',\n    yellow:'ffff00',yellowgreen:'9acd32'\n    };\n\n    for (let key in namedColors) {\n      if (colorString == key) {\n\n        let hexRex = {  \n          rex: /^([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})$/,\n          sprig: function (slices) {\n            for (let i = 0; i < 3; i++) {\n              retArray[i] = parseInt(slices[i+1],16);\n            }\n            retArray[3] = 1;\n            return true;\n          }\n        };\n\n        let hexProc = hexRex.rex.exec(namedColors[key]);\n        retArray[4] = isValid = hexRex.sprig(hexProc);\n\n        return retArray;\n      }\n    }\n  };   // end of named colors section\n\n\n       // NEW regex  0.1.6 - still current for use with with 0.1.8+\n      // See docs for breakdown of regex pattern\n  let colorRex = {\n    rex: /(?:^(?:#|0x|)(?:(?:([\\da-f])([\\da-f])([\\da-f])([\\da-f])?)(?!\\S)|(?:([\\da-f]{2})(?:([\\da-f]{2})([\\da-f]{2})([\\da-f]{2})?)?))|(?:(?:^(?:rgba?|)\\(? ?(?:(?:(?:(255|(?:25[0-4]|2[0-4]\\d|1?\\d{1,2})(?:\\.\\d{1,24})?)))(?:,[^\\S]*$|(?:(?:, ?| )(255|(?:25[0-4]|2[0-4]\\d|1?\\d{1,2})(?:\\.\\d{1,24})?)(?:, ?| )(255|(?:25[0-4]|2[0-4]\\d|1?\\d{1,2})(?:\\.\\d{1,24})?)))|(100%|\\d{1,2}(?:\\.\\d{1,24})?%)(?:,?[^\\S]*$|(?:(?:, ?| )(?:(100%|\\d{1,2}(?:\\.\\d{1,24})?%)(?:, ?| )(100%|\\d{1,2}(?:\\.\\d{1,24})?%)))))|^(?:color\\((srgb|srgb-linear|display-p3|a98-rgb|prophoto-rgb|rec2020|xyz|xyz-d50|xyz-d65) (?:(100%|\\d{1,2}(?:\\.\\d{1,24})?%|[0 ]\\.\\d{1,24}|[01])) (?:(100%|\\d{1,2}(?:\\.\\d{1,24})?%|[0 ]\\.\\d{1,24}|[01])) (?:(100%|\\d{1,2}(?:\\.\\d{1,24})?%|[0 ]\\.\\d{1,24}|[01])))|^(?:((?:r(?!gb)|c(?!olor)|[abd-qs-z])[a-z]{2,5})\\( ?((?:\\d{0,3}\\.|)\\d{1,24}%?)(?:, ?| )((?:\\d{0,3}\\.|)\\d{1,24}%?)(?:, ?| )((?:\\d{0,3}\\.|)\\d{1,24}%?))))(?:(?:,| \\/| ) ?(?:(100%|\\d{1,2}(?:\\.\\d{1,24})?%|[0 ]\\.\\d{1,24}|[01])))?(?:\\)| |))[^\\S]*$/,\n\n\n    parsley: function (slices) {\n\n      let slicePos = 0;\n      let sliceLast = 0;\n      let base = 10;\n      let divisor = 100.0;\n      let convertPct = 2.55;\n      let alpha = '1';\n\n\n      if (slices[23]) {\n        alpha = slices[23];\n        delete slices[23];\n      }\n                     // Set alpha before anything else\n      retArray[3] = (alpha.match(/%/g)) ?\n                    parseFloat(alpha) / divisor :\n                    parseFloat(alpha);\n\n                    //  determine first and last element\n      for (let k=1; k < slices.length; k++) { \n        if (slices[k]) {\n          slicePos = (slicePos) ? slicePos : k;\n          sliceLast = k;\n        }\n      }\n\n  switch (sliceLast) {\n\n    case 4:  // This is the 3-4 digit hex parsing\n      base = 16;\n      divisor = 15.0;\n      retArray[3] = parseInt(slices[sliceLast],base) / divisor ;\n    case 3:\n      base = 16;\n      for (let i = 0; i < 3; i++) {\n        retArray[i] = parseInt(slices[slicePos+i] + slices[slicePos+i],base);\n      }\n    break;\n\n    case 5:    // allows two digit hex to become grey\n      base = 16;\n    case 9:  // allows 1-3 digit INT with comma to become grey\n      retArray[0] = retArray[1] = retArray[2] = \n        (base == 10) ? parseFloat(slices[sliceLast]) : \n                       parseInt(slices[sliceLast],base);\n    break;\n\n    case 12:  // allows single percentage to become grey\n      retArray[0] = retArray[1] = retArray[2] = \n         parseFloat(slices[sliceLast]) * convertPct;\n    break;\n\n    case 8:  // These are the main parsings for hex and rgb()\n      base = 16;\n      divisor = 255.0;\n      retArray[3] = parseInt(slices[8],base) / divisor ;\n    case 7:\n      base = 16;\n    case 11:\n      for (let i = 0; i < 3; i++) {\n        retArray[i] = (base == 10) ? parseFloat(slices[slicePos+i]) :\n                                  parseInt(slices[slicePos+i],base);\n      }\n    break;\n\n    case 14: //  rgb() percentage\n      for (let i = 0; i < 3; i++) {\n        retArray[i] = parseFloat(slices[slicePos+i]) * convertPct;\n      }\n    break;\n    \n    case 18:  // This is for color() CSS 4\n      retArray[5] = slices[15];\n\n      for (let i = 0; i < 3; i++) { // color() is converted to 0.0-255.0\n        slicePos++;\n        retArray[i] = (slices[slicePos].match(/%/g)) ?\n            parseFloat(slices[slicePos]) * 2.55:\n            parseFloat(slices[slicePos]) * 255;  \n      }\n    break;\n\n    case 22: // This is the \"wild west\" section\n\n      retArray[5] = slices[slicePos];\n\n      for (let i = 0; i < 3; i++ ) {\n        slicePos++;\n        retArray[i] = (slices[slicePos]) ? (slices[slicePos].match(/%/g)) ?\n            parseFloat(slices[slicePos]) / divisor :\n            parseFloat(slices[slicePos]) : 0.0 ;\n      }\n\n          // Process for HSL and HWB\n      if (retArray[5].match(/^(?:hsla?|hwba?)/i) ) {\n        let sat,light,white,black,hwbFact;\n\n        let hue = retArray[0] % 360.0;\n        if (hue < 0) { hue += 360.0; }\n\n        if (retArray[5].match(/^hsla?/i) ) {\n          sat   = retArray[1];\n          light = retArray[2];\n          white = 0;\n          hwbFact = 1; \n        } else if (retArray[5].match(/^hwba?/i) ) {\n          white = retArray[1];\n          black = retArray[2];\n\n          if (white + black >= 1) {\n            retArray[0] = retArray[1] = retArray[2] = white / (white + black);\n            retArray[5] = 'sRGB';\n            break;\n          }\n\n          sat = 1.0;\n          light = 0.5;\n          hwbFact = (1.0 - white - black);\n        }\n\n        function f(n) {  // from CSS reference implementation\n          let k = (n + hue/30) % 12;\n          let a = sat * Math.min(light, 1 - light);\n          return light - a * Math.max(-1, Math.min(k - 3, 9 - k, 1));\n        }\n\n        retArray[0] = Math.round(255 * (f(0) * hwbFact + white));\n        retArray[1] = Math.round(255 * (f(8) * hwbFact + white));\n        retArray[2] = Math.round(255 * (f(4) * hwbFact + white));\n        retArray[5] = 'sRGB';\n      }\n      break;\n      }\n      return true;\n    }  // close parsley sub-function\n  };  // close colorRex obj\n\n\n      //  The main call\n  let slicesProc = colorRex.rex.exec(colorString);\n\n  if (slicesProc) { // Error catch\n    \n    retArray[4] = isValid = colorRex.parsley(slicesProc); // set the isValid flag\n\n    return retArray;\n\n  } else {\n    isValid = false;\n    console.log('colorParsley error: unable to parse string')\n    return [0,0,0,0,isValid,'parsleyError']  // throw 'InvalidString'\n  }\n};\n\n\n\n\n////////////////////////////////////////////////////////////////////////////////\n/////  BONUS STRING FORMATTING UTILITIES  \\////////////////////////////////////\n\n\n/////  ƒ  colorToHex()  ///////////////////////////////////////////////////\n\n    // returns hex string, 3,4,6, or 8 chars if that was entered, no #\n    // If alpha is 1 or empty, no alpha is returned i.e. abcf returns abc\n    \nexport function colorToHex (rgba = [0,0,0,''], allow3 = true) {\n    let R = Math.round(rgba[0]).toString(16).padStart(2, '0');\n    let G = Math.round(rgba[1]).toString(16).padStart(2, '0');\n    let B = Math.round(rgba[2]).toString(16).padStart(2, '0');\n    let A = (rgba[3] == '' || rgba[3] == 1) ? '' :\n             Math.round(rgba[3] * 255).toString(16).padStart(2, '0') ;\n\n         // this if returns a 3 character hex if possible - aabbcc becomes abc\n    if ( allow3 &&\n         parseInt(A, 16) % 17 == 0 &&\n         parseInt(A, 16) % 17 == 0 &&\n         parseInt(A, 16) % 17 == 0 &&\n         (parseInt(A, 16) % 17 == 0 || A == '')\n         ) {\n         return R.charAt(0) + G.charAt(0) + B.charAt(0) + A.charAt(0);\n    } else {\n      return R + G + B + A;\n    }\n}\n\n\n\n\n/////  ƒ  colorToRGB()  ///////////////////////////////////////////////////\n\n    // RGBAstr — returns rgb() or rgba() INT value string (0-255) no spaces\n    // If alpha is 1 or empty, no alpha is returned \n    \nexport function colorToRGB (rgba = [0,0,0,''], round = true) {\n    if (round) {\n      for (let i=0; i < 3; i++) {\n        rgba[i] = Math.round(rgba[i]);\n      } \n                // while RGB tuples round to int, A needs additional precision\n      rgba[3] = ( rgba[3] == '' || rgba[3] == 1) ? 1 :\n                  Math.trunc(rgba[3]*1000)*0.001; \n    }\n\n    return ( rgba[3] == '' || rgba[3] == 1) ? \n      'rgb(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ')' :\n      'rgba(' + rgba[0] + ',' + rgba[1] + ',' + rgba[2] + ',' + rgba[3] + ')';\n}\n\n\n/////\\  END UTILITIES  ///////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n\n\n///\\                                      //////////////////////////////////////\n////\\                                    //////////////////////////////////////\n/////\\  END COLOR PARSLEY 0.1.8  BLOCK  //////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n\n"],
  "mappings": "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",
  "names": []
}
